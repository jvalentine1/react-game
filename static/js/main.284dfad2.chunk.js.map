{"version":3,"sources":["components/body/wrapper/index.js","components/navbar/index.js","components/body/playHost/index.js","components/body/playWindow/index.js","components/container/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","id","status","score","topScore","Host","Play","Object","assign","key","src","alt","Container","state","picsRandom","clicked","redId","lossEffect","randomizeImages","_this","setState","temporaryValue","randomIndex","currentIndex","Images","length","Math","floor","random","console","log","scoreInitialize","event","_event$target","target","name","defineProperty","concat","scoreChecker","check","scoreCallback","counts","i","undefined","this","_this2","body_wrapper","navbar","body_playHost","map","pic","body_playWindow","image","onClick","React","Component","App","container","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.284dfad2.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './wrapper.css';\n\nfunction Wrapper(props) {\n    return (\n        <div className=\"container-fluid bg-color\">{props.children}</div>\n    )\n}\n\nexport default Wrapper;","/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport './navBar.css';\n\nfunction Nav(props) {\n    return (\n        <div className=\"row myNav\">\n            <div className=\"col-md-4 text-center p-3\">\n                <h1 className=\"logo\">Clicky Game</h1>\n            </div>\n            <div className=\"col-md-4 text-center p-3\" id={props.id}>\n                <h1>{props.status}</h1>\n            </div>\n            <div className=\"col-md-4 text-center p-3\">\n                <h1>Score:{props.score} | Top Score:{props.topScore}</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav;","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './playHost.css';\n\nfunction Host(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"row play-host\">\n                <div className=\"col-md-1\"></div>\n                <div className=\"col-md-10 mx-auto img-host\" id={props.id}>{props.children}</div>\n                <div className=\"col-md-1\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Host;","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './playWindow.css';\n\nfunction Play (props) {\n    return (\n        <span>\n            <img key={props.id} src={props.src} className=\"game-img\" {...props} alt=\"game-img\"></img>\n        </span>\n    );\n}\n\nexport default Play;","/* eslint-disable eqeqeq */\n/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport Wrapper from '../body/wrapper';\nimport Nav from '../navbar';\nimport Host from '../body/playHost';\nimport Play from '../body/playWindow';\nimport Images from '../../images.json';\n\nclass Container extends React.Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        status: \"Click An Image To Begin!\",\n        picsRandom: [],\n        clicked: [],\n        redId: \"\", \n        lossEffect: \"\"\n    };\n\ncomponentDidMount() {\n    this.randomizeImages();\n}\n\nrandomizeImages = () => {\n    this.setState({ redId: \"\" });\n    this.setState({ lossEffect: \"\" });\n     \n    var currentIndex = Images.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        temporaryValue = Images[currentIndex];\n        Images[currentIndex] = Images[randomIndex];\n        Images[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ picsRandom: Images }, () => {\n        console.log(this.state.picsRandom);\n    });\n    \n}\n\nscoreInitialize = event => {\n    const {id, name} = event.target;\n\n    console.log(name);\n    console.log(id);\n    \n    this.setState({ [name]: this.state.clicked.concat([id]) }, this.scoreChecker);\n    \n}\n\nscoreChecker = () => {\n    console.log(this.state.clicked);\n    const check = this.state.clicked;\nif(this.scoreCallback(check)) {\n    if(this.state.topScore < this.state.score) {\n        this.setState({ topScore: this.state.score });\n    }\n    this.setState({ \n        score: 0,\n        clicked: [],\n        status: \"Incorrect Guess! You Lose!\",\n        redId:\"status-host\",\n        lossEffect:\"lose-swing\"\n        });\n    } else {\n        this.setState({ \n            score: this.state.score + 1,\n            status: \"Correct Guess!\"\n            });\n        this.randomizeImages();\n    }\n}\n\nscoreCallback = check => {\n    var counts = [];\n    for(var i = 0; i <= check.length; i++) {\n        if(counts[check[i]] === undefined) {\n            counts[check[i]] = 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\n    render() {\n        return (\n            <Wrapper>\n                <Nav \n                score={this.state.score}\n                topScore={this.state.topScore}\n                status={this.state.status}\n                id={this.state.redId}\n                />\n                <Host id={this.state.lossEffect}>\n                    {this.state.picsRandom.map(pic => {\n                    return (\n                      <Play \n                      key={pic.id}\n                      id={pic.id}\n                      src={pic.image}\n                      name=\"clicked\"\n                      onClick={this.scoreInitialize}\n                      />  \n                    );   \n                    })}\n                </Host>\n            </Wrapper>\n        );\n    }\n}\n\nexport default Container;","import React from 'react';\nimport Container from './components/container'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}